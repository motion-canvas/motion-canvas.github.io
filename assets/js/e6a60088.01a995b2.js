"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[9080],{876:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,d=c["".concat(p,".").concat(m)]||c[m]||g[m]||r;return t?i.createElement(d,o(o({ref:n},u),{},{components:t})):i.createElement(d,o({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=t(7896),a=(t(2784),t(876));const r={sidebar_position:5,slug:"/plugins"},o="Authoring plugins",l={unversionedId:"advanced/plugins",id:"advanced/plugins",title:"Authoring plugins",description:"Plugins are a way to extend the functionality of Motion Canvas.",source:"@site/docs/advanced/plugins.mdx",sourceDirName:"advanced",slug:"/plugins",permalink:"/docs/plugins",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins.mdx",tags:[],version:"current",lastUpdatedBy:"Waldemar Lehner",sidebarPosition:5,frontMatter:{sidebar_position:5,slug:"/plugins"},sidebar:"docs",previous:{title:"Filters and Effects",permalink:"/docs/filters-and-effects"},next:{title:"Migration",permalink:"/docs/category/migration"}},p={},s=[{value:"Writing a runtime plugin",id:"writing-a-runtime-plugin",level:2},{value:"Writing a Node.js plugin",id:"writing-a-nodejs-plugin",level:2},{value:"Passing options to Runtime",id:"passing-options-to-runtime",level:3},{value:"Plugin examples",id:"plugin-examples",level:2}],u={toc:s};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"authoring-plugins"},"Authoring plugins"),(0,a.kt)("p",null,"Plugins are a way to extend the functionality of Motion Canvas."),(0,a.kt)("p",null,"Motion Canvas consists of two separate parts: a ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite"),"\ndevelopment server running on Node.js and an editor running in the browser\n(runtime). Plugins can extend both of these."),(0,a.kt)("h2",{id:"writing-a-runtime-plugin"},"Writing a runtime plugin"),(0,a.kt)("div",{className:"row margin-bottom--md"},(0,a.kt)("div",{className:"col col--6"},(0,a.kt)("p",null,"Let's start by creating the entry point - a simple file that exports our plugin.\nFor now, we'll put that file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," directory of our Motion Canvas\nproject. If you find yourself reusing the plugin across multiple projects, you\ncan put it in a separate package."),(0,a.kt)("p",null,"To define the plugin, we pass a configuration object to the\n",(0,a.kt)("a",{parentName:"p",href:"/api/core/plugin#makePlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"makePlugin"))," helper function and export the result. ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," is the\nonly required property. ",(0,a.kt)("inlineCode",{parentName:"p"},"player")," is an optional hook that will receive the\n",(0,a.kt)("a",{parentName:"p",href:"/api/core/app/Player"},(0,a.kt)("inlineCode",{parentName:"a"},"Player"))," instance right after it's created. Take a look\nat the ",(0,a.kt)("a",{parentName:"p",href:"/api/core/plugin/Plugin"},(0,a.kt)("inlineCode",{parentName:"a"},"Plugin"))," interface for the full list of\navailable hooks.")),(0,a.kt)("div",{className:"col col--6"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="Project structure"',title:'"Project','structure"':!0},"  project/\n  \u251c\u2500\u2500 src/\n  \u2502   \u251c\u2500\u2500 scenes/\n  \u2502   \u2502   \u2514\u2500\u2500 example.tsx\n// highlight-next-line\n+ \u2502   \u251c\u2500\u2500 plugin.ts\n  \u2502   \u2514\u2500\u2500 project.ts\n  \u251c\u2500\u2500 package.json\n  \u2514\u2500\u2500 vite.config.ts\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugin.ts"',title:'"src/plugin.ts"'},"import {makePlugin} from '@motion-canvas/core';\n\nexport default makePlugin({\n  name: 'motion-canvas-plugin-example',\n  player(player) {\n    player.onRecalculated.subscribe(() => {\n      player.requestReset();\n      player.togglePlayback(true);\n    });\n  },\n});\n")),(0,a.kt)("p",null,"In this example we subscribe to the\n",(0,a.kt)("a",{parentName:"p",href:"/api/core/app/Player#onRecalculated"},(0,a.kt)("inlineCode",{parentName:"a"},"onRecalculated"))," event to play the\nanimation from the beginning whenever this event occurs. Recalculation happens\nwhen we edit the animation either in the editor or in the code."),(0,a.kt)("p",null,"Now we can import the plugin in our project file. Note that\n",(0,a.kt)("a",{parentName:"p",href:"/api/core/plugin#makePlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"makePlugin"))," returns a function that we need to call to create an\nactual plugin object. We'll see ",(0,a.kt)("a",{parentName:"p",href:"#passing-options-to-runtime"},"why that's useful"),"\nin a moment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/project.ts"',title:'"src/project.ts"'},"import {makeProject} from '@motion-canvas/core';\n// highlight-next-line\nimport myPlugin from './plugin';\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n  // highlight-start\n  plugins: [myPlugin()],\n  //                ^^ we need to call the function\n  // highlight-end\n});\n")),(0,a.kt)("p",null,"That's it! Now we can run the project and see our plugin in action."),(0,a.kt)("h2",{id:"writing-a-nodejs-plugin"},"Writing a Node.js plugin"),(0,a.kt)("div",{className:"row margin-bottom--md"},(0,a.kt)("div",{className:"col col--6"},(0,a.kt)("p",null,"Motion Canvas builds on top of the Vite plugin system. To create a plugin that\nruns on Node.js, you just create a ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/guide/api-plugin.html#authoring-a-plugin"},"Vite plugin")," and import it in\nyour ",(0,a.kt)("inlineCode",{parentName:"p"},"vite.config.ts")," file. On top of that, ",(0,a.kt)("inlineCode",{parentName:"p"},"@motion-canvas/vite-plugin"),"\nprovides a symbol that lets you define motion-canvas-specific options."),(0,a.kt)("p",null,"Let's start by creating a file for our plugin. This time we'll put it in the\nroot directory of our project because Vite plugins are not part of the runtime\nsource code."),(0,a.kt)("p",null,"We use the Vite ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/guide/api-plugin.html#configureserver"},(0,a.kt)("inlineCode",{parentName:"a"},"configureServer"))," hook to add a custom\nendpoint. Meanwhile, the ",(0,a.kt)("inlineCode",{parentName:"p"},"entryPoint")," option lets us specify the path to our\nruntime plugin:")),(0,a.kt)("div",{className:"col col--6"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="Project structure"',title:'"Project','structure"':!0},"  project/\n  \u251c\u2500\u2500 src/\n  \u2502   \u251c\u2500\u2500 scenes/\n  \u2502   \u2502   \u2514\u2500\u2500 example.tsx\n  \u2502   \u251c\u2500\u2500 plugin.ts\n  \u2502   \u2514\u2500\u2500 project.ts\n  \u251c\u2500\u2500 package.json\n// highlight-next-line\n+ \u251c\u2500\u2500 myVitePlugin.ts\n  \u2514\u2500\u2500 vite.config.ts\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="myVitePlugin.ts"',title:'"myVitePlugin.ts"'},"import {Plugin, PLUGIN_OPTIONS} from '@motion-canvas/vite-plugin';\n\nexport default function myVitePlugin(): Plugin {\n  return {\n    name: 'vite-plugin-motion-canvas-example',\n\n    // extend the dev server using Vite plugin hooks:\n    configureServer(server) {\n      server.middlewares.use('/my-plugin', (req, res) => {\n        res.end('Hello from my plugin!');\n      });\n    },\n\n    // extend Motion Canvas:\n    [PLUGIN_OPTIONS]: {\n      entryPoint: './plugin.ts',\n    },\n  };\n}\n")),(0,a.kt)("p",null,"Here's how we would import such plugin in our ",(0,a.kt)("inlineCode",{parentName:"p"},"vite.config.ts")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="vite.config.ts"',title:'"vite.config.ts"'},"import {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n// highlight-next-line\nimport myVitePlugin from './myVitePlugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas(),\n    // highlight-next-line\n    myVitePlugin(),\n  ],\n});\n")),(0,a.kt)("p",null,"Also, since we defined the entry point in the Node.js plugin, we no longer need\nto import the runtime plugin in our project file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/project.ts"',title:'"src/project.ts"'},"  import {makeProject} from '@motion-canvas/core';\n- import myPlugin from './plugin';\n  import example from './scenes/example?scene';\n\n  export default makeProject({\n    scenes: [example],\n-   plugins: [myPlugin()],\n  });\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Notice that we defined the entry point as ",(0,a.kt)("inlineCode",{parentName:"p"},"'./plugin.ts'"),". Because it's a\nrelative path, it will be resolved relative to the project file. Once you turn\nyour plugin into a separate package, you can use a package name instead.")),(0,a.kt)("p",null,"You can verify that the plugin is working by running the project and visiting\n",(0,a.kt)("a",{parentName:"p",href:"http://localhost:9000/my-plugin"},"http://localhost:9000/my-plugin"),"."),(0,a.kt)("h3",{id:"passing-options-to-runtime"},"Passing options to Runtime"),(0,a.kt)("p",null,"A Node.js plugin has the ability to pass options to the runtime plugin. We can\ndo that using the ",(0,a.kt)("inlineCode",{parentName:"p"},"runtimeConfig")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="myVitePlugin.ts"',title:'"myVitePlugin.ts"'},"import {Plugin, PLUGIN_OPTIONS} from '@motion-canvas/vite-plugin';\n\nexport default function myVitePlugin(): Plugin {\n  return {\n    name: 'vite-plugin-motion-canvas-example',\n    // ...\n    [PLUGIN_OPTIONS]: {\n      entryPoint: './plugin.ts',\n      // highlight-start\n      runtimeConfig: () => ({\n        foo: 'bar',\n      }),\n      // highlight-end\n    },\n  };\n}\n")),(0,a.kt)("p",null,"We can then update the runtime plugin to receive these options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/plugin.ts"',title:'"src/plugin.ts"'},"import {makePlugin} from '@motion-canvas/core';\n\n// highlight-start\ninterface MyPluginOptions {\n  foo: string;\n}\n// highlight-end\n\nexport default makePlugin((options?: MyPluginOptions) => {\n  // highlight-next-line\n  console.log(options?.foo); // 'bar'\n\n  return {\n    name: 'motion-canvas-plugin-example',\n    player(player) {\n      player.onRecalculated.subscribe(() => {\n        player.requestReset();\n        player.togglePlayback(true);\n      });\n    },\n  };\n});\n")),(0,a.kt)("h2",{id:"plugin-examples"},"Plugin examples"),(0,a.kt)("p",null,"You can take a look at our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/motion-canvas/exporters/tree/main/packages/ffmpeg"},"FFmpeg plugin")," for an example of a\nfully-fledged plugin. It's runtime portion provides the editor with a Video\n",(0,a.kt)("a",{parentName:"p",href:"/api/core/app/Exporter"},"exporter")," that sends the rendered frames over to\nNode.js. The server portion then uses FFmpeg to convert the frames into a video."))}c.isMDXComponent=!0}}]);