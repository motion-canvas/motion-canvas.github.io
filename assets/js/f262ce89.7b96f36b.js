"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[5235],{876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),g=o,u=p["".concat(d,".").concat(g)]||p[g]||m[g]||i;return t?a.createElement(u,r(r({ref:n},c),{},{components:t})):a.createElement(u,r({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=g;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9057:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7896),o=(t(2784),t(876));const i={sidebar_position:1,slug:"/code"},r="Code",l={unversionedId:"components/code/index",id:"components/code/index",title:"Code",description:"The Code node is used for displaying code snippets.",source:"@site/docs/components/code/index.mdx",sourceDirName:"components/code",slug:"/code",permalink:"/docs/code",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx",tags:[],version:"current",lastUpdatedBy:"Jacob",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/code"},sidebar:"docs",previous:{title:"Components",permalink:"/docs/category/components"},next:{title:"Grammars",permalink:"/docs/grammars"}},d={},s=[{value:"Parsing and Highlighting",id:"parsing-and-highlighting",level:2},{value:"Defining Code",id:"defining-code",level:2},{value:"Using Signals",id:"using-signals",level:2},{value:"Animating Code",id:"animating-code",level:2},{value:"Diffing",id:"diffing",level:3},{value:"<code>append</code> and <code>prepend</code>",id:"append-and-prepend",level:3},{value:"<code>insert</code>, <code>replace</code>, and <code>remove</code>",id:"insert-replace-and-remove",level:3},{value:"<code>edit</code>",id:"edit",level:3},{value:"Signals",id:"signals",level:3},{value:"Code Ranges",id:"code-ranges",level:2},{value:"Code Selection",id:"code-selection",level:2},{value:"Querying Positions and Sizes",id:"querying-positions-and-sizes",level:2},{value:"Custom Themes",id:"custom-themes",level:2},{value:"Multiple Languages",id:"multiple-languages",level:2},{value:"Rendering",id:"rendering",level:2}],c={toc:s},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor mode=preview",editor:!0,mode:"preview"},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {all, createRef, DEFAULT, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={'const number = 7;'}\n    />,\n  );\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code.replace(code().findFirstRange('number'), 'variable', 0.6),\n    code().code.prepend(0.6)`function example() {\\n  `,\n    code().code.append(0.6)`\\n}`,\n  );\n\n  yield* waitFor(0.6);\n  yield* code().selection(code().findFirstRange('variable'), 0.6);\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code('const number = 7;', 0.6),\n    code().selection(DEFAULT, 0.6),\n  );\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code"},(0,o.kt)("inlineCode",{parentName:"a"},"Code"))," node is used for displaying code snippets.\nIt supports syntax highlighting and a handful of different methods for animating\nthe code."),(0,o.kt)("h2",{id:"parsing-and-highlighting"},"Parsing and Highlighting"),(0,o.kt)("p",null,"First things first, if you just copy any of the snippets in this tutorial you'll\nnotice that the displayed code has a uniform color. The default highlighter uses\n",(0,o.kt)("a",{parentName:"p",href:"https://lezer.codemirror.net/"},(0,o.kt)("inlineCode",{parentName:"a"},"Lezer"))," to parse and highlighting the code but\nto do that it needs the grammar for the language you're using. You can set that\nup in your project configuration file."),(0,o.kt)("p",null,"First, install the grammar for your language. You can check out this\nnon-exhaustive ",(0,o.kt)("a",{parentName:"p",href:"/docs/grammars"},"list of available grammars"),". For this tutorial,\nyou should install the ",(0,o.kt)("inlineCode",{parentName:"p"},"javascript")," grammar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @lezer/javascript\n")),(0,o.kt)("p",null,"Then, in your project configuration, instantiate a new ",(0,o.kt)("inlineCode",{parentName:"p"},"LezerHighlighter")," using\nthe imported grammar, and set it as the default highlighter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/project.ts"',title:'"src/project.ts"'},"import {makeProject} from '@motion-canvas/core';\nimport example from './scenes/example?scene';\n\n// highlight-start\nimport {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {parser} from '@lezer/javascript';\n\nCode.defaultHighlighter = new LezerHighlighter(parser);\n// highlight-end\n\nexport default makeProject({\n  scenes: [example],\n});\n")),(0,o.kt)("p",null,"Now all ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," nodes in your project will use ",(0,o.kt)("inlineCode",{parentName:"p"},"@lezer/javascript")," to parse and\nhighlight the snippets. If you want to use more than one language, check out the\n",(0,o.kt)("a",{parentName:"p",href:"#multiple-languages"},"Multiple Languages")," section."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Note that, by default, the JavaScript parser doesn't support JSX or TypeScript.\nYou can enable support for these via ",(0,o.kt)("a",{parentName:"p",href:"https://lezer.codemirror.net/docs/guide/#dialects"},"dialects"),". The dialects\navailable for a given parser are usually listed in the documentation of the\ngrammar package."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Code.defaultHighlighter = new LezerHighlighter(\n  parser.configure({\n    // Provide a space-separated list of dialects to enable:\n    dialect: 'jsx ts',\n  }),\n);\n"))),(0,o.kt)("h2",{id:"defining-code"},"Defining Code"),(0,o.kt)("p",null,"The code to display is set via the ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#code"},(0,o.kt)("inlineCode",{parentName:"a"},"code")),"\nproperty. In the simplest case, you can just use a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Code\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      code={'const number = 7;'}\n    />,\n  );\n});\n")),(0,o.kt)("p",null,"However, usually code snippets contain multiple lines of code. It's much more\nconvenient to use a template string for this (denoted using the backtick\ncharacter ",(0,o.kt)("inlineCode",{parentName:"p"},"`"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"view.add(\n  <Code\n    fontSize={28}\n    fontFamily={'JetBrains Mono'}\n    // highlight-start\n    code={`\\\nfunction example() {\n  const number = 7;\n}\n`}\n    // highlight-end\n  />,\n);\n")),(0,o.kt)("p",null,"Notice two things here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The code snippet ignores the indentation of the template string itself. The\ntemplate string preserves all whitespace characters, so any additional spaces\nor tabs at the beginning of each line would be included in the snippet.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The backslash character (",(0,o.kt)("inlineCode",{parentName:"p"},"\\"),") at the very beginning is used to escape the\nfirst newline character. This lets the snippet start on a new line without\nactually including an empty line at the beginning. Without the slash, the\nequivalent code would have to be written as:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"view.add(\n  <Code\n    fontSize={28}\n    fontFamily={'JetBrains Mono'}\n    // highlight-start\n    code={`function example() {\n  const number = 7;\n}\n`}\n    // highlight-end\n  />,\n);\n")))),(0,o.kt)("p",null,"Template strings allow you to easily include variables in your code snippets\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"${}")," syntax. In the example below, ",(0,o.kt)("inlineCode",{parentName:"p"},"${name}")," is replaced with the\nvalue of the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," variable (which is ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," in this case):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nconst name = 'number';\n\nview.add(\n  <Code\n    fontSize={28}\n    fontFamily={'JetBrains Mono'}\n    code={`\\\nfunction example() {\n  // highlight-next-line\n  const ${name} = 7;\n}\n`}\n  />,\n);\n")),(0,o.kt)("p",null,"Any valid JavaScript expression inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"${}")," syntax will be included in the\ncode snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nconst isRed = true;\n\nview.add(\n  <Code\n    fontSize={28}\n    fontFamily={'JetBrains Mono'}\n    code={`\\\nfunction example() {\n  // highlight-next-line\n  const color = '${isRed ? 'red' : 'blue'}';\n}\n`}\n  />,\n);\n")),(0,o.kt)("h2",{id:"using-signals"},"Using Signals"),(0,o.kt)("p",null,"If you try to use signals inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"${}")," syntax, you'll notice that they don't\nwork as expected. Invoking a signal inside a template string uses its current\nvalue and then never updates the snippet again, even if the signal changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor mode=code",editor:!0,mode:"code"},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    <Code\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      code={`const ${nameSignal()} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // The code snippet still displays \"number\" instead of \"newValue\".\n  yield* waitFor(1);\n});\n")),(0,o.kt)("p",null,"Trying to pass the signal without invoking it is even worse. Since each signal\nis a function, it will be stringified and included in the snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    <Code\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      code={`const ${nameSignal} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  yield* waitFor(1);\n});\n")),(0,o.kt)("p",null,"This happens because template strings are parsed immediately when our code is\nexecuted. To work around this, you can use a custom ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"},"tag function"),"\ncalled ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#CODE"},(0,o.kt)("inlineCode",{parentName:"a"},"CODE")),". It allows the ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," node to parse the\ntemplate string in a custom way and correctly support signals. It's really easy\nto use, simply put the ",(0,o.kt)("inlineCode",{parentName:"p"},"CODE")," tag function before your template string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code, CODE} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    <Code\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      // Note the CODE tag function here:\n      code={CODE`const ${nameSignal} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // Now the code snippet is updated accordingly.\n  yield* waitFor(1);\n});\n")),(0,o.kt)("p",null,"The value returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"CODE")," can itself be nested in other template strings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const implementation = CODE`\\\n    console.log('Hello!');\n    return 7;`;\n\nconst method = CODE`\\\n  greet() {\n${implementation}\n  }`;\n\nconst klass = CODE`\\\nclass Example {\n${method}\n}\n`;\n\nview.add(<Code code={klass} />);\n// class Example {\n//   greet() {\n//     console.log('Hello!');\n//     return 7;\n//   }\n// }\n")),(0,o.kt)("p",null,"You might have noticed that these examples used a specialized type of signal\ncreated using ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#createSignal"},(0,o.kt)("inlineCode",{parentName:"a"},"Code.createSignal()")),".\nWhile the generic ",(0,o.kt)("a",{parentName:"p",href:"/api/core/signals#createSignal"},(0,o.kt)("inlineCode",{parentName:"a"},"createSignal()"))," would work\nfine in these simple examples, the specialized signal will shine once you start\nanimating your code snippets."),(0,o.kt)("h2",{id:"animating-code"},"Animating Code"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," node comes with a few different techniques for animating the code\ndepending on the level of control you need."),(0,o.kt)("h3",{id:"diffing"},"Diffing"),(0,o.kt)("p",null,"The default method for animating code is diffing. It's used whenever you tween\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  const number = 9;\n}`}\n    />,\n  );\n\n  yield* code().code('const nine = 9;', 0.6).wait(0.6).back(0.6).wait(0.6);\n});\n")),(0,o.kt)("p",null,"This method uses the patience diff algorithm to determine the differences\nbetween the old and new code snippets. It then animates the changes accordingly."),(0,o.kt)("h3",{id:"append-and-prepend"},(0,o.kt)("inlineCode",{parentName:"h3"},"append")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"prepend")),(0,o.kt)("p",null,"For cases where you want to add some code at the beginning or end of the\nsnippet, you can use the ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#append"},(0,o.kt)("inlineCode",{parentName:"a"},"append"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#prepend"},(0,o.kt)("inlineCode",{parentName:"a"},"prepend"))," methods. They can either\nmodify the code immediately or animate the changes over time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n    />,\n  );\n\n  // append immediately\n  code().code.append(`const one = 1;`);\n\n  // animate using the signal signature\n  yield* code().code.append('\\nconst two = 2;', 0.6);\n\n  // animate using the template tag signature\n  yield* code().code.append(0.6)`\nconst three = 3;`;\n\n  // prepend works analogically\n  yield* code().code.prepend('// example\\n', 0.6);\n\n  yield* waitFor(0.6);\n});\n")),(0,o.kt)("h3",{id:"insert-replace-and-remove"},(0,o.kt)("inlineCode",{parentName:"h3"},"insert"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"replace"),", and ",(0,o.kt)("inlineCode",{parentName:"h3"},"remove")),(0,o.kt)("p",null,"For more granular control over the changes, you can use\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#insert"},(0,o.kt)("inlineCode",{parentName:"a"},"insert")),",\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#replace"},(0,o.kt)("inlineCode",{parentName:"a"},"replace")),", and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#remove"},(0,o.kt)("inlineCode",{parentName:"a"},"remove"))," to modify the code at specific\npoints. Check out ",(0,o.kt)("a",{parentName:"p",href:"#code-ranges"},"Code Ranges")," for more information on how to\nspecify points in your code snippets."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code, word, lines} from '@motion-canvas/2d';\nimport {all, createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  console.log('Hello!');\n}`}\n    />,\n  );\n\n  // insert code at line 2, column 0\n  yield* code().code.insert([2, 0], '  return 7;\\n', 0.6);\n\n  // replace the word \"Hello!\" with \"Goodbye!\"\n  yield* code().code.replace(word(1, 15, 6), 'Goodbye!', 0.6);\n\n  // remove line 2\n  yield* code().code.remove(lines(2), 0.6);\n\n  // animate multiple changes at the same time\n  yield* all(\n    code().code.replace(word(0, 9, 7), 'greet', 0.6),\n    code().code.replace(word(1, 15, 8), 'Hello!', 0.6),\n  );\n\n  yield* waitFor(0.6);\n});\n")),(0,o.kt)("h3",{id:"edit"},(0,o.kt)("inlineCode",{parentName:"h3"},"edit")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#edit"},(0,o.kt)("inlineCode",{parentName:"a"},"edit"))," method offers a different way\nof defining code transitions. It's used together with the\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#insert"},(0,o.kt)("inlineCode",{parentName:"a"},"replace")),", ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#insert"},(0,o.kt)("inlineCode",{parentName:"a"},"insert")),", and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#remove"},(0,o.kt)("inlineCode",{parentName:"a"},"remove"))," helper functions that are inserted into the\ntemplate string. They let you specify the changes in a more visual way, without\nhaving to know the exact positions in the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code, replace, insert, remove} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n    />,\n  );\n\n  yield* code().code.edit(0.6)`\\\nfunction example() {\n  ${insert(`// This is a comment\n  `)}console.log(\"${replace('Hello!', 'Goodbye!')}\");\n${remove(`  return 7;\n`)}}`;\n\n  yield* waitFor(0.6);\n});\n")),(0,o.kt)("h3",{id:"signals"},"Signals"),(0,o.kt)("p",null,"Notice that all the methods used above are not invoked on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," node but\nrather on its ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," property. It may seem unnecessarily verbose but there's a\ngood reason for it: the ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," property is a specialized code signal, just like\nthe ones created by\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#createSignal"},(0,o.kt)("inlineCode",{parentName:"a"},"Code.createSignal()")),". This means that\nall the animation methods are also available on your own signals:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code, CODE} from '@motion-canvas/2d';\nimport {all, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const message = Code.createSignal(`Hello, world!`);\n  const body = Code.createSignal(CODE`console.log('${message}');`);\n\n  view.add(\n    <Code\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={CODE`\\\nfunction hello() {\n  ${body}\n}`}\n    />,\n  );\n\n  yield* waitFor(0.3);\n  // prettier-ignore\n  yield* all(\n    message('Goodbye, world!', 0.6),\n    body.append(0.6)`\\n  return 7;`,\n  );\n  yield* waitFor(0.3);\n});\n")),(0,o.kt)("p",null,"Code signals can also be nested in the template strings passed to the animation\nmethods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor mode=code",editor:!0,mode:"code"},"import {makeScene2D, Code, CODE} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={'// example'}\n    />,\n  );\n\n  const body = Code.createSignal(CODE`console.log('Hello!');`);\n  yield* waitFor(0.3);\n  // Notice how the CODE tag is not used here because\n  // \"append\" already supports nested signals:\n  yield* code().code.append(0.6)`\nfunction hello() {\n  ${body}\n}`;\n\n  // The \"body\" signal remains reactive after the append animation:\n  yield* body(`console.log('Goodbye!');`, 0.6);\n  yield* waitFor(0.3);\n});\n")),(0,o.kt)("h2",{id:"code-ranges"},"Code Ranges"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#CodeRange"},(0,o.kt)("inlineCode",{parentName:"a"},"CodeRange"))," is used to specify a continuous span of\ncharacters using line and column numbers. It can be used for editing the code,\nvisually selecting a part of it, or querying the positions and sizes of\ncharacters."),(0,o.kt)("p",null,"Code ranges have the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// prettier-ignore\n[[startLine, startColumn], [endLine, endColumn]];\n")),(0,o.kt)("p",null,"For example, to select the first three characters of the second line, you would\nuse the following range:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// prettier-ignore\n[[1, 0], [1, 3]];\n")),(0,o.kt)("p",null,"Keep in mind that both lines and columns are zero-based. Additionally, you\nshould think of columns as being located on the left side of the characters,\nmeaning that if you want to include the character at column ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," you should use\n",(0,o.kt)("inlineCode",{parentName:"p"},"n + 1")," as the end column."),(0,o.kt)("p",null,"For convenience, the ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#word"},(0,o.kt)("inlineCode",{parentName:"a"},"word"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#lines"},(0,o.kt)("inlineCode",{parentName:"a"},"lines"))," helper functions are provided to create some of\nthe common types of ranges:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// a range starting at line 1, column 3,\n// spanning 3 characters:\nword(1, 3, 3);\n\n// a range starting at line 1, column 3,\n// spanning until the end of the line:\nword(1, 3);\n\n// a range containing lines from 1 to 3 (inclusive):\nlines(1, 3);\n\n// a range containing line 2\nlines(2);\n")),(0,o.kt)("p",null,"Once you create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," node, you can use its\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#findFirstRange"},(0,o.kt)("inlineCode",{parentName:"a"},"findFirstRange")),",\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#findAllRanges"},(0,o.kt)("inlineCode",{parentName:"a"},"findAllRanges")),", and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#findLastRange"},(0,o.kt)("inlineCode",{parentName:"a"},"findLastRange"))," methods to find the\nranges that contain a specific string or match the given regular expression:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor mode=code",editor:!0,mode:"code"},"import {makeScene2D, Code} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  console.log('Hello!');\n}`}\n    />,\n  );\n\n  yield* code().code.replace(\n    // find the range of \"example\" and replace it with \"greet\"\n    code().findFirstRange('example'),\n    'greet',\n    0.6,\n  );\n\n  yield* waitFor(0.6);\n});\n")),(0,o.kt)("h2",{id:"code-selection"},"Code Selection"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code/CodeSignalContext#selection"},(0,o.kt)("inlineCode",{parentName:"a"},"selection"))," property can be used\nto visually distinguish a part of the code snippet. The selection is specified\nusing an individual ",(0,o.kt)("a",{parentName:"p",href:"#code-ranges"},(0,o.kt)("inlineCode",{parentName:"a"},"code range"))," or an array of ranges:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Code, lines} from '@motion-canvas/2d';\nimport {createRef, DEFAULT, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction hello() {\n  console.log('Hello');\n}`}\n    />,\n  );\n\n  // select all instances of \"hello\" (case-insensitive)\n  yield* code().selection(code().findAllRanges(/hello/gi), 0.6);\n  yield* waitFor(0.3);\n\n  // select line 1\n  yield* code().selection(lines(1), 0.6);\n  yield* waitFor(0.3);\n\n  // reset the selection\n  yield* code().selection(DEFAULT, 0.6);\n  yield* waitFor(0.3);\n});\n")),(0,o.kt)("h2",{id:"querying-positions-and-sizes"},"Querying Positions and Sizes"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#getPointBBox"},(0,o.kt)("inlineCode",{parentName:"a"},"getPointBBox"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#getSelectionBBox"},(0,o.kt)("inlineCode",{parentName:"a"},"getSelectionBBox"))," can be used to\nretrieve the position and size of a specific character or a range of characters,\nrespectively. The returned value is a ",(0,o.kt)("a",{parentName:"p",href:"/api/core/types/BBox"},(0,o.kt)("inlineCode",{parentName:"a"},"bounding box"))," in\nthe local space of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," node."),(0,o.kt)("p",null,"The following example uses ",(0,o.kt)("inlineCode",{parentName:"p"},"getSelectionBBox")," to draw a rectangle around the\nword ",(0,o.kt)("inlineCode",{parentName:"p"},"log"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {Code, Rect, makeScene2D} from '@motion-canvas/2d';\nimport {createRef, createSignal} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono'}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction hello() {\n  console.log('Hello');\n}`}\n    />,\n  );\n\n  const range = createSignal(() => {\n    const range = code().findFirstRange('log');\n    const bboxes = code().getSelectionBBox(range);\n    // \"getSelectionBBox\" returns an array of bboxes,\n    // one for each line in the range. You can just\n    // use the first one for this example.\n    const first = bboxes[0];\n    return first.expand([4, 8]);\n  });\n\n  code().add(\n    <Rect\n      offset={-1}\n      position={range().position}\n      size={range().size}\n      lineWidth={4}\n      stroke={'white'}\n      radius={8}\n    />,\n  );\n});\n")),(0,o.kt)("h2",{id:"custom-themes"},"Custom Themes"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"LezerHighlighter")," uses CodeMirror's\n",(0,o.kt)("a",{parentName:"p",href:"https://codemirror.net/examples/styling/"},(0,o.kt)("inlineCode",{parentName:"a"},"HighlightStyle"))," to assign colors to\nspecific code tokens. By default, the\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/code#DefaultHighlightStyle"},(0,o.kt)("inlineCode",{parentName:"a"},"DefaultHighlightStyle"))," is used. You can\nspecify your own style by passing it as the second argument to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"LezerHighlighter")," constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {HighlightStyle} from '@codemirror/language';\nimport {tags} from '@lezer/highlight';\nimport {parser} from '@lezer/javascript';\n\nconst MyStyle = HighlightStyle.define([\n  {tag: tags.keyword, color: 'red'},\n  {tag: tags.function(tags.variableName), color: 'yellow'},\n  {tag: tags.number, color: 'blue'},\n  {tag: tags.string, color: 'green'},\n  // ...\n]);\n\nCode.defaultHighlighter = new LezerHighlighter(parser, MyStyle);\n")),(0,o.kt)("h2",{id:"multiple-languages"},"Multiple Languages"),(0,o.kt)("p",null,"You can configure highlighters on a per-node basis using the\n",(0,o.kt)("a",{parentName:"p",href:"/api/2d/components/Code#highlighter"},(0,o.kt)("inlineCode",{parentName:"a"},"highlighter"))," property. This will\noverride the default highlighter set in the project configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\n// ...\n\nview.add(\n  <Code\n    // this node uses the default parser\n    offsetX={-1}\n    x={-400}\n    code={`\nfunction hello() {\n  console.log('Hello!');\n}\n`}\n  />,\n);\n\nview.add(\n  <Code\n    // this node uses the Rust parser\n    highlighter={RustHighlighter}\n    offsetX={1}\n    x={400}\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n")),(0,o.kt)("p",null,"It can be useful to create a custom component for the languages you often use.\nYou can use the ",(0,o.kt)("a",{parentName:"p",href:"/api/2d/utils#withDefaults"},(0,o.kt)("inlineCode",{parentName:"a"},"withDefaults"))," helper function to\nquickly extend any node with your own defaults:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/nodes/RustCode.ts"',title:'"src/nodes/RustCode.ts"'},"import {Code, LezerHighlighter, withDefaults} from '@motion-canvas/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\nexport const RustCode = withDefaults(Code, {\n  highlighter: RustHighlighter,\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/scenes/example.tsx"',title:'"src/scenes/example.tsx"'},"import {RustCode} from '../nodes/RustCode';\n\n// ...\n\nview.add(\n  <RustCode\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n")),(0,o.kt)("h2",{id:"rendering"},"Rendering"),(0,o.kt)("p",null,"If you're using a Chromium-based browser, you might notice that the code\nanimations jitter a bit. This happens because the canvas snaps the rendered text\nto the nearest pixel which prevents it from moving smoothly. Until we find a way\nto fix this, we recommend you use Firefox for rendering."))}m.isMDXComponent=!0}}]);