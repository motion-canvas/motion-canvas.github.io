import{B as e,a3 as p,u as t,v as c}from"./_virtual_settings-dea369ce.js";e(o,c());function*o(s,a){if(typeof s!="number"&&(a=s,s=1/0),s===1/0&&p().parent===null){t().error({message:"Tried to execute an infinite loop in the main thread.",remarks:`<p>Make sure to use <code>yield</code> or <code>spawn()</code> to execute the loop concurrently in a
separate thread:</p>
<pre class="wrong"><code class="language-ts"><span class="hljs-keyword">yield</span>* <span class="hljs-title function_">loop</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">rect</span>().<span class="hljs-title function_">opacity</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">opacity</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));</code></pre><pre class="correct"><code class="language-ts"><span class="hljs-keyword">yield</span> <span class="hljs-title function_">loop</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">rect</span>().<span class="hljs-title function_">opacity</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">opacity</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));
<span class="hljs-comment">// or</span>
<span class="hljs-title function_">spawn</span>(<span class="hljs-title function_">loop</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">rect</span>().<span class="hljs-title function_">opacity</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">opacity</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)));</code></pre><p>If you want to execute the loop a finite number of times, specify the iteration
count as the first argument:</p>
<pre class=""><code class="language-ts"><span class="hljs-keyword">yield</span>* <span class="hljs-title function_">loop</span>(<span class="hljs-number">10</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">rect</span>().<span class="hljs-title function_">opacity</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">opacity</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));
<span class="hljs-comment">//          ^ iteration count</span></code></pre>`,stack:new Error().stack});return}for(let n=0;n<s;n++){const l=a(n);l?yield*l:yield}}export{o as l};
