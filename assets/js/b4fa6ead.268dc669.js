"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[7889],{876:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>f});var t=r(2784);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(r),u=i,f=l["".concat(p,".").concat(u)]||l[u]||m[u]||a;return r?t.createElement(f,o(o({ref:n},d),{},{components:r})):t.createElement(f,o({ref:n},d))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[l]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8106:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(7896),i=(r(2784),r(876));const a={sidebar_position:3,slug:"/bezier-curves"},o="B\xe9zier Curves",s={unversionedId:"components/bezier",id:"components/bezier",title:"B\xe9zier Curves",description:"B\xe9zier curves are ubiquitous in computer graphics. Motion Canvas comes with",source:"@site/docs/components/bezier.mdx",sourceDirName:"components",slug:"/bezier-curves",permalink:"/docs/bezier-curves",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx",tags:[],version:"current",lastUpdatedBy:"Jacob",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/bezier-curves"},sidebar:"docs",previous:{title:"LaTeX",permalink:"/docs/nodes"},next:{title:"Spline",permalink:"/docs/spline"}},p={},c=[{value:"Using the components",id:"using-the-components",level:2},{value:"Defining control points",id:"defining-control-points",level:3},{value:"Drawing arrows",id:"drawing-arrows",level:3},{value:"Examples",id:"examples",level:2}],d={toc:c},l="wrapper";function m(e){let{components:n,...r}=e;return(0,i.kt)(l,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"b\xe9zier-curves"},"B\xe9zier Curves"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor mode=preview",editor:!0,mode:"preview"},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n")),(0,i.kt)("p",null,"B\xe9zier curves are ubiquitous in computer graphics. Motion Canvas comes with\ncomponents to draw both quadratic and cubic B\xe9zier curves."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you're trying to draw more complicated shapes than single B\xe9zier curves allow\nfor, check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/spline"},(0,i.kt)("inlineCode",{parentName:"a"},"Spline"))," component, instead.")),(0,i.kt)("h2",{id:"using-the-components"},"Using the components"),(0,i.kt)("p",null,"Each example below applies to both the ",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/QuadBezier"},(0,i.kt)("inlineCode",{parentName:"a"},"QuadBezier"))," and\n",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/CubicBezier"},(0,i.kt)("inlineCode",{parentName:"a"},"CubicBezier"))," nodes. You can switch between the two types of\ncurves using the dropdown on the right side of the animation player."),(0,i.kt)("h3",{id:"defining-control-points"},"Defining control points"),(0,i.kt)("p",null,"B\xe9zier curves are defined by a start and end point, as well as several control\npoints. The exact number of control points is different for different kinds of\nB\xe9zier curves. A quadratic B\xe9zier curve has only a single control point whereas\na cubic B\xe9zier curve has two."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n")),(0,i.kt)("p",null,"All points of a B\xe9zier curve are compound signals. This means that it's possible\nto animate their ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," components separately."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{6,13}","{6,13}":!0},"view.add(\n  <CubicBezier\n    ref={bezier}\n    lineWidth={6}\n    stroke={'lightseagreen'}\n    p0={[-200, -70]}\n    p1={[120, -120]}\n    p2={[-120, 120]}\n    p3={[200, 70]}\n  />,\n);\n\nyield * bezier().p0.x(200, 1);\n")),(0,i.kt)("h3",{id:"drawing-arrows"},"Drawing arrows"),(0,i.kt)("p",null,"Similar to the ",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/Line"},(0,i.kt)("inlineCode",{parentName:"a"},"Line"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/spline"},(0,i.kt)("inlineCode",{parentName:"a"},"Spline"))," components, we can also add\narrowheads to a B\xe9zier curve. To do so, we can use the\n",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#startArrow"},(0,i.kt)("inlineCode",{parentName:"a"},"startArrow"))," and ",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#endArrow"},(0,i.kt)("inlineCode",{parentName:"a"},"endArrow"))," properties. We can\ncontrol the size of the arrowheads with the ",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#arrowSize"},(0,i.kt)("inlineCode",{parentName:"a"},"arrowSize"))," signal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n")),(0,i.kt)("admonition",{title:"Animating adding arrows",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"startArrow")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"endArrow")," are booleans, they don't lend themselves well\nto being animated. To animate adding arrows to a B\xe9zier curve, we should animate\n",(0,i.kt)("inlineCode",{parentName:"p"},"arrowSize"),", instead."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{7,13}","{7,13}":!0},"view.add(\n  <QuadBezier\n    ref={bezier}\n    p0={[-150, 50]}\n    p1={[0, -120]}\n    p2={[150, 50]}\n    arrowSize={0}\n    startArrow\n    endArrow\n  />,\n);\n\nyield * bezier().arrowSize(16, 1);\n"))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The following section shows examples of common animations for B\xe9zier curves."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Drawing B\xe9zier curves\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 2).to(0, 2);\n});\n\n// snippet Moving nodes along a curve\nimport {makeScene2D, CubicBezier, Rect} from '@motion-canvas/2d';\nimport {\n  createRef,\n  waitFor,\n  createSignal,\n  createComputed,\n} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  const progress = createSignal(0);\n  const curvePoint = createComputed(() =>\n    bezier().getPointAtPercentage(progress()),\n  );\n\n  view.add(\n    <>\n      <CubicBezier\n        ref={bezier}\n        lineWidth={6}\n        stroke={'lightgray'}\n        p0={[-300, -70]}\n        p1={[120, -120]}\n        p2={[-120, 120]}\n        p3={[300, 70]}\n      />\n      <Rect\n        size={25}\n        fill={'lightseagreen'}\n        position={() => curvePoint().position}\n        rotation={() => curvePoint().tangent.degrees}\n      />\n    </>,\n  );\n\n  yield* progress(1, 2);\n  yield* waitFor(0.5);\n  yield* progress(0, 2);\n  yield* waitFor(0.5);\n});\n")))}m.isMDXComponent=!0}}]);