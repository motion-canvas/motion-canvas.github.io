"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[5468],{876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2665:(e,n,t)=>{t.d(n,{Z:()=>f});var a=t(2784);const i="container_lQCo",r="small_As57",o="banner_A4QS",l="player_tELG",s="link_BTzN",c="icon_wSGd";var p=t(7896);function u(e){let{width:n=24,height:t=24,...i}=e;return a.createElement("svg",(0,p.Z)({viewBox:"0 0 24 24",width:n,height:t,"aria-hidden":!0},i),a.createElement("path",{d:"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z",fill:"currentColor"}))}var m=t(9817),d=t(6277);function h(e){let{name:n}=e;const t=`https://github.com/motion-canvas/motion-canvas/blob/main/packages/examples/src/scenes/${n}.tsx`;return a.createElement(m.Z,{to:t,className:(0,d.Z)("padding--sm",s)},a.createElement("span",null,"View source code"),a.createElement(u,{className:c}))}function f(e){let{name:n,banner:t,small:s}=e;return a.createElement("div",{className:(0,d.Z)(i,t&&o,s&&r)},a.createElement("motion-canvas-player",{class:l,src:`/examples/${n}.js`,auto:t}),a.createElement(h,{name:n}))}t(1263).Z.canUseDOM&&t.e(5483).then(t.bind(t,5483))},9941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=t(7896),i=(t(2784),t(876)),r=t(2665),o=t(8128);const l={sidebar_position:6,slug:"/tweening"},s="Tweening",c={unversionedId:"getting-started/tweening",id:"getting-started/tweening",title:"Tweening",description:"Tweens are one of the fundamental building blocks of animation.",source:"@site/docs/getting-started/tweening.mdx",sourceDirName:"getting-started",slug:"/tweening",permalink:"/docs/tweening",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx",tags:[],version:"current",lastUpdatedBy:"Jacob",sidebarPosition:6,frontMatter:{sidebar_position:6,slug:"/tweening"},sidebar:"docs",previous:{title:"Signals",permalink:"/docs/signals"},next:{title:"References",permalink:"/docs/references"}},p={},u=[{value:"<code>tween</code> function",id:"tween-function",level:2},{value:"Timing functions",id:"timing-functions",level:2},{value:"Interpolation functions",id:"interpolation-functions",level:2},{value:"Tweening properties",id:"tweening-properties",level:2}],m={toc:u};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tweening"},"Tweening"),(0,i.kt)("p",null,"Tweens are one of the fundamental building blocks of animation.\nThey are a special type of generators that animate between two values\nover given time."),(0,i.kt)("h2",{id:"tween-function"},(0,i.kt)("inlineCode",{parentName:"h2"},"tween")," function"),(0,i.kt)("p",null,"The simplest way to create a tween is via the\n",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening#tween"},(0,i.kt)("inlineCode",{parentName:"a"},"tween"))," function:"),(0,i.kt)(o.Z,{language:"tsx",mdxType:"CodeBlock"},"import {makeScene2D} from '@motion-canvas/2d/lib/scenes';\nimport {Circle} from '@motion-canvas/2d/lib/components';\nimport {createRef} from '@motion-canvas/core/lib/utils';\nimport {tween, map} from '@motion-canvas/core/lib/tweening';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      //highlight-start\n      ref={circle}\n      x={-300}\n      width={240}\n      height={240}\n      fill=\"#e13238\"\n    />,\n  );\n  //highlight-start\n  yield* tween(2, value => {\n    circle().position.x(map(-300, 300, value));\n  });\n  //highlight-end\n});\n"),(0,i.kt)("p",null,"In the example above, we animate the x coordinate of our circle\nfrom ",(0,i.kt)("inlineCode",{parentName:"p"},"-300")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"300")," over a span of ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," second."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening#tween"},(0,i.kt)("inlineCode",{parentName:"a"},"tween"))," function takes two parameters.\nThe first one specifies the tween duration in seconds. The second is\na callback function that will be called each frame the tween takes\nplace. The ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," parameter it recieves is a number ranging from ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", informing us about the progress of the tween. We can use it to\ncalculate the values that our tween animates. In the case of our circle,\nwe use the ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," function to map the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," range from ",(0,i.kt)("inlineCode",{parentName:"p"},"[0, 1]")," to\n",(0,i.kt)("inlineCode",{parentName:"p"},"[-300, 300]")," and set it as the ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," coordinate:"),(0,i.kt)(r.Z,{small:!0,name:"tweening-linear",mdxType:"AnimationPlayer"}),(0,i.kt)("h2",{id:"timing-functions"},"Timing functions"),(0,i.kt)("p",null,"At the moment, our animation feels a bit unnatural. The speed with which\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," parameter changes is constant, which in turn makes the circle\nmove with constant speed. In real life, however, objects have inertia -\nthey take time to speed up and slow down. We can simulate this behavior\nwith ",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening"},"timing functions"),"."),(0,i.kt)("p",null,"A timing function takes a number in the range ",(0,i.kt)("inlineCode",{parentName:"p"},"[0, 1]")," and returns another\nnumber in the same range but with a modified rate of change.\nMotion Canvas provides all\n",(0,i.kt)("a",{parentName:"p",href:"https://easings.net/"},"the most popular timing functions")," (sometimes called\neasing functions) but since it's a normal JavaScript function you can create\nyour own."),(0,i.kt)("p",null,"Let's use the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening#easeInOutCubic"},(0,i.kt)("inlineCode",{parentName:"a"},"easeInOutCubic"))," function\nto fix our animation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* tween(2, value => {\n  circle().position.x(map(-300, 300, easeInOutCubic(value)));\n});\n")),(0,i.kt)(r.Z,{small:!0,name:"tweening-cubic",mdxType:"AnimationPlayer"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"easeInOut")," means that the object will speed up at the start (",(0,i.kt)("inlineCode",{parentName:"p"},"in"),") and slow\ndown at the end (",(0,i.kt)("inlineCode",{parentName:"p"},"Out"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"Cubic")," denotes the mathematical function used -\nin this case it's a cubic equation. Knowing that, a function called\n",(0,i.kt)("inlineCode",{parentName:"p"},"easeOutQuad")," would make the object start with full speed and then slow down\nat the end using a quadratic equation."),(0,i.kt)("p",null,"Because using timing functions to map a range of values is a really common\npattern, it's possible to skip ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," entirely and pass the range to the\ntiming function itself:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// This:\nmap(-300, 300, easeInOutCubic(value));\n// Can be simplified to:\neaseInOutCubic(value, -300, 300);\n")),(0,i.kt)("h2",{id:"interpolation-functions"},"Interpolation functions"),(0,i.kt)("p",null,"So far, we've only animated a single, numeric value.\nThe ",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening#map"},(0,i.kt)("inlineCode",{parentName:"a"},"map"))," function can be used to interpolate between\ntwo numbers but to animate more complex types we'll need to use interpolation\nfunctions. Consider the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// import { Color } from \"@motion-canvas/core/lib/types\";\nyield* tween(2, value => {\n  circle().fill(\n    Color.lerp(\n      new Color('#e6a700'),\n      new Color('#e13238'),\n      easeInOutCubic(value),\n    ),\n  );\n});\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/core/types/Color#lerp"},(0,i.kt)("inlineCode",{parentName:"a"},"Color.lerp"))," is a static function that\ninterpolates between two colors:"),(0,i.kt)(r.Z,{small:!0,name:"tweening-color",mdxType:"AnimationPlayer"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"All ",(0,i.kt)("a",{parentName:"p",href:"/api/core/types"},"complex types")," in Motion Canvas provide a static method\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},"lerp")," that interpolates between two instances of said type.")),(0,i.kt)("p",null,"Aside from the default linear interpolation, some types offer more advanced\nfunctions such as the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/types/Vector2#arcLerp"},(0,i.kt)("inlineCode",{parentName:"a"},"Vector2.arcLerp")),".\nIt makes the object follow a curved path from point a to b:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* tween(2, value => {\n  circle().position(\n    // highlight-next-line\n    Vector2.arcLerp(\n      new Vector2(-300, 200),\n      new Vector2(300, -200),\n      easeInOutCubic(value),\n    ),\n  );\n});\n")),(0,i.kt)(r.Z,{small:!0,name:"tweening-vector",mdxType:"AnimationPlayer"}),(0,i.kt)("h2",{id:"tweening-properties"},"Tweening properties"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/api/core/tweening#tween"},(0,i.kt)("inlineCode",{parentName:"a"},"tween"))," function is useful when we need to\norchestrate complex animations. However, there's a better way of tweening\nindividual properties. You may recall from the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/quickstart"},"quickstart")," section that the following\ntween:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* tween(2, value => {\n  circle().color(\n    Color.lerp(\n      new Color('#e6a700'),\n      new Color('#e13238'),\n      easeInOutCubic(value),\n    ),\n  );\n});\n")),(0,i.kt)("p",null,"Can be written as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* circle().color('#e13238', 2);\n")),(0,i.kt)("p",null,"Here, we use a ",(0,i.kt)("a",{parentName:"p",href:"/api/core/signals/SignalTween"},(0,i.kt)("inlineCode",{parentName:"a"},"SignalTween"))," signature that\nlooks similar to a setter, except it accepts the transition duration as its\nsecond argument. Under the hood, this will also create a tween - one that\nstarts with the current value and ends with the newly provided one."),(0,i.kt)("p",null,"We can chain multiple tweens together by calling the\n",(0,i.kt)("inlineCode",{parentName:"p"},"to()")," method on the returned object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* circle().color('#e13238', 2).to('#e6a700', 2);\n")),(0,i.kt)("p",null,"By default, property tweens use ",(0,i.kt)("inlineCode",{parentName:"p"},"easeInOutCubic")," as the timing function.\nWe can override that by providing a third argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* circle().color(\n  '#e13238',\n  2,\n  // highlight-next-line\n  easeOutQuad\n);\n")),(0,i.kt)("p",null,"Similarly, we can pass a custom interpolation function as the forth argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield* circle().position(\n  new Vector2(300, -200),\n  2,\n  easeInOutCubic,\n  // highlight-next-line\n  Vector2.arcLerp\n);\n")))}d.isMDXComponent=!0}}]);