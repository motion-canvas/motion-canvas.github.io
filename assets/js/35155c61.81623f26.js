"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[9946],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2665:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(2784);const i="container_lQCo",o="small_As57",r="banner_A4QS",l="player_tELG",s="link_BTzN",c="icon_wSGd";var p=n(7896);function m(e){let{width:t=24,height:n=24,...i}=e;return a.createElement("svg",(0,p.Z)({viewBox:"0 0 24 24",width:t,height:n,"aria-hidden":!0},i),a.createElement("path",{d:"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z",fill:"currentColor"}))}var d=n(9817),u=n(6277);function h(e){let{name:t}=e;const n=`https://github.com/motion-canvas/motion-canvas/blob/main/packages/examples/src/scenes/${t}.tsx`;return a.createElement(d.Z,{to:n,className:(0,u.Z)("padding--sm",s)},a.createElement("span",null,"View source code"),a.createElement(m,{className:c}))}function f(e){let{name:t,banner:n,small:s,link:c}=e;return a.createElement("div",{className:(0,u.Z)(i,n&&r,s&&o)},a.createElement("motion-canvas-player",{class:l,src:`/examples/${t}.js`,auto:n}),a.createElement(h,{name:c||t}))}n(1263).Z.canUseDOM&&n.e(5455).then(n.bind(n,5455))},3641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7896),i=(n(2784),n(876)),o=(n(2665),n(8128));const r={sidebar_position:1,slug:"/quickstart"},l="Quickstart",s={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",title:"Quickstart",description:"In this guide, we'll create a simple animation using Motion Canvas.",source:"@site/docs/getting-started/quickstart.mdx",sourceDirName:"getting-started",slug:"/quickstart",permalink:"/docs/quickstart",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx",tags:[],version:"current",lastUpdatedBy:"Jacob",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/quickstart"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/category/getting-started"},next:{title:"Animation flow",permalink:"/docs/flow"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a new project",id:"creating-a-new-project",level:3},{value:"Programming an animation",id:"programming-an-animation",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart"},"Quickstart"),(0,i.kt)("p",null,"In this guide, we'll create a simple animation using Motion Canvas."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Make sure that ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node.js")," version 16 or greater is installed\non your machine."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can run the following command to check if Node.js is already installed:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node -v\n"))),(0,i.kt)("h3",{id:"creating-a-new-project"},"Creating a new project"),(0,i.kt)("p",null,"Run the following command in order to scaffold a new Motion Canvas project (If\nthe command fails check out the ",(0,i.kt)("a",{parentName:"p",href:"#troubleshooting"},"troubleshooting")," section\nbelow):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init @motion-canvas@latest\n")),(0,i.kt)("p",null,"Answer the prompts to name your project and select which language you would like\nto use; either TypeScript or plain JavaScript. We recommend using TypeScript in\nyour first project, since that's the language we're using throughout this\ndocumentation."),(0,i.kt)("p",null,"You'll also be asked to choose how you'd like to export your animations. Motion\nCanvas comes with a built-in ",(0,i.kt)("a",{parentName:"p",href:"/docs/rendering/image-sequence"},(0,i.kt)("em",{parentName:"a"},"Image sequence")),"\nexporter - perfect if you want to import your animations into a video editor.\nHowever, if you want to directly produce a finished video, you can choose to\ninstall the ",(0,i.kt)("a",{parentName:"p",href:"/docs/rendering/video"},(0,i.kt)("em",{parentName:"a"},"Video (FFmpeg)"))," exporter. Don't worry, you\ncan select multiple exporters, and you can always\n",(0,i.kt)("a",{parentName:"p",href:"/docs/rendering/video#existing-project"},"add more")," later."),(0,i.kt)("p",null,"To complete the scaffolding process, you'll need to run the following commands:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"C"),"hange ",(0,i.kt)("strong",{parentName:"li"},"D"),"irectory (",(0,i.kt)("inlineCode",{parentName:"li"},"cd"),") to the project root (You should replace\n",(0,i.kt)("inlineCode",{parentName:"li"},"<project-path>")," with the path you picked during scaffolding):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd <project-path>\n"))),(0,i.kt)("li",{parentName:"ol"},"Install necessary dependencies:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install\n"))),(0,i.kt)("li",{parentName:"ol"},"Start the editor:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm run serve\n")),"The editor can be accessed by visiting\n",(0,i.kt)("a",{parentName:"li",href:"http://localhost:9000/"},"http://localhost:9000/"),". We'll use it to preview our\nanimation, although for now there's not much to see.")),(0,i.kt)("h3",{id:"programming-an-animation"},"Programming an animation"),(0,i.kt)("p",null,"The scaffolding command will create several files for you, but for now we're\ngoing to focus on ",(0,i.kt)("inlineCode",{parentName:"p"},"src/scenes/example.tsx"),", which is where we can add our\nanimations. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"example.tsx")," in a text editor, and replace all code in the\nfile with the following snippet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {makeScene2D, Circle} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const myCircle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      ref={myCircle}\n      // try changing these properties:\n      x={-300}\n      width={140}\n      height={140}\n      fill=\"#e13238\"\n    />,\n  );\n\n  yield* all(\n    myCircle().position.x(300, 1).to(-300, 1),\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n  );\n});\n")),(0,i.kt)("p",null,"Now save the file. Any changes you make are automatically picked up and\nreflected in the preview."),(0,i.kt)("p",null,"You should see a red circle in the preview pane at the top right of the web\napplication. Press the play button to see the circle animate across the screen."),(0,i.kt)("h3",{id:"explanation"},"Explanation"),(0,i.kt)("p",null,"Each video in Motion Canvas is represented by a project configuration object. In\nour example, this configuration is declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/project.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/project.ts"',title:'"src/project.ts"'},"import {makeProject} from '@motion-canvas/core';\n\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n});\n")),(0,i.kt)("p",null,"When creating a project, we need to provide it with an array of scenes to\ndisplay. In this case, we use only one scene imported from\n",(0,i.kt)("inlineCode",{parentName:"p"},"src/scenes/example.tsx"),"."),(0,i.kt)("p",null,"A scene is a set of elements displayed on the screen and an animation that\ngoverns them. The most basic scene looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {makeScene2D} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  // animation\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeScene2D()")," takes a function generator and turns it into a scene which we\nthen import in our project file. The function generator describes the flow of\nthe animation, while the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"view")," argument is used to add elements to the\nscene."),(0,i.kt)("p",null,"You can learn more about scenes, nodes, and this XML-like syntax in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/hierarchy"},"scene hierarchy")," section. For now, what's important is that,\nin our example, we add an individual ",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/Circle"},(0,i.kt)("inlineCode",{parentName:"a"},"<Circle/>")),"\nnode to our scene. We make it red, set its width and height as ",(0,i.kt)("inlineCode",{parentName:"p"},"140")," pixels and\nposition it ",(0,i.kt)("inlineCode",{parentName:"p"},"300")," pixels left from the center:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'view.add(\n  <Circle\n    // highlight-start\n    ref={myCircle}\n    x={-300}\n    width={140}\n    height={140}\n    fill="#e13238"\n  />,\n);\n')),(0,i.kt)("p",null,"To animate our circle we first need to\n",(0,i.kt)("a",{parentName:"p",href:"/docs/references"},"grab a reference to it"),". That's the purpose of the\n",(0,i.kt)("a",{parentName:"p",href:"/api/core/utils#createRef"},(0,i.kt)("inlineCode",{parentName:"a"},"createRef"))," function. We use it to create a\nreference and pass it to our circle using the\n",(0,i.kt)("a",{parentName:"p",href:"/api/2d/components/NodeProps#ref"},(0,i.kt)("inlineCode",{parentName:"a"},"ref"))," attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nconst myCircle = createRef<Circle>();\n\nview.add(\n  <Circle\n    // highlight-next-line\n    ref={myCircle}\n    x={-300}\n    width={140}\n    height={140}\n    fill="#e13238"\n  />,\n);\n')),(0,i.kt)("p",null,"We then access the circle through ",(0,i.kt)("inlineCode",{parentName:"p"},"myCircle()")," and animate its properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"yield *\n  all(\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n    myCircle().position.x(300, 1).to(-300, 1),\n  );\n")),(0,i.kt)("p",null,"This snippet may seem a bit confusing so let's break it down."),(0,i.kt)("p",null,"Each property of a node can be read and updated throughout the animation. For\nexample, in the circle above we defined its ",(0,i.kt)("inlineCode",{parentName:"p"},"fill")," property as ",(0,i.kt)("inlineCode",{parentName:"p"},"'#e13238'"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'<Circle\n  ref={myCircle}\n  x={-300}\n  width={140}\n  height={140}\n  // highlight-next-line\n  fill="#e13238"\n/>\n')),(0,i.kt)("p",null,"Using our reference we can now retrieve this property's value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const fill = myCircle().fill(); // '#e13238'\n")),(0,i.kt)("p",null,"We can also update it by passing the new value as the first argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"myCircle().fill('#e6a700');\n")),(0,i.kt)("p",null,"This will immediately update the color of our circle. If we want to transition\nto a new value over some time, we can pass the transition duration (in seconds)\nas the second argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"myCircle().fill('#e6a700', 1);\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("a",{parentName:"p",href:"/docs/tweening"},"creates a tween animation")," that smoothly changes the fill\ncolor over one second."),(0,i.kt)("p",null,"Animations in Motion Canvas don't play on their own, we need to explicitly tell\nthem to. This is why scenes are declared using generator functions - they serve\nas a description of how the animation should play out. By yielding different\ninstructions we can tell the scene animation to do different things."),(0,i.kt)("p",null,"For example, to play the tween we created, we can do:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield * myCircle().fill('#e6a700', 1);\n")),(0,i.kt)("p",null,"This will pause the generator, play out the animation we yielded, and then\ncontinue."),(0,i.kt)("p",null,"To play another animation, right after the first one, we can simply write\nanother ",(0,i.kt)("inlineCode",{parentName:"p"},"yield*")," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield * myCircle().fill('#e6a700', 1);\nyield * myCircle().fill('#e13238', 1);\n")),(0,i.kt)("p",null,"But since we're animating the same property, we can write it in a more compact\nway:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield * myCircle().fill('#e6a700', 1).to('#e13238', 1);\n")),(0,i.kt)("p",null,"In our example, aside from changing the color, we also move our circle around.\nWe can try doing it the same way we animated the color:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield * myCircle().fill('#e6a700', 1).to('#e13238', 1);\nyield * myCircle().position.x(300, 1).to(-300, 1);\n")),(0,i.kt)("p",null,"This works, but the position will start animating ",(0,i.kt)("strong",{parentName:"p"},"after")," the fill color. To\nmake them happen at the same time, we use the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/flow#all"},(0,i.kt)("inlineCode",{parentName:"a"},"all"))," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"yield *\n  all(\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n    myCircle().position.x(300, 1).to(-300, 1),\n  );\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/core/flow#all"},(0,i.kt)("inlineCode",{parentName:"a"},"all"))," takes one or more animations and merges them together. Now they'll\nhappen at the same time. The ",(0,i.kt)("a",{parentName:"p",href:"/docs/flow"},"animation flow")," section goes into more\ndepth about generators and flow functions such as ",(0,i.kt)("a",{parentName:"p",href:"/api/core/flow#all"},(0,i.kt)("inlineCode",{parentName:"a"},"all")),"."),(0,i.kt)("p",null,"This brings us back to our initial example:"),(0,i.kt)(o.Z,{language:"tsx",title:"src/scenes/example.tsx",mdxType:"CodeBlock"},"import {makeScene2D} from '@motion-canvas/2d/lib/scenes';\nimport {Circle} from '@motion-canvas/2d/lib/components';\nimport {createRef} from '@motion-canvas/core/lib/utils';\nimport {all} from '@motion-canvas/core/lib/flow';\n\nexport default makeScene2D(function* (view) {\n  const myCircle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      //highlight-start\n      ref={myCircle}\n      x={-300}\n      width={140}\n      height={140}\n      fill=\"#e13238\"\n    />,\n  );\n\n  yield* all(\n    myCircle().position.x(300, 1).to(-300, 1),\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n  );\n});\n"),(0,i.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("code",null,"npm init @motion-canvas@latest")," fails to execute."),(0,i.kt)("p",null,"There was ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/npm/cli/issues/5175"},"a bug in npm")," causing the\nabove command to fail. It got fixed in version ",(0,i.kt)("inlineCode",{parentName:"p"},"8.15.1"),". You can follow\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/try-the-latest-stable-version-of-npm"},"this guide")," to\nupdate your npm. Alternatively, you can use the following command instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm exec @motion-canvas/create@latest\n"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("code",null,"npm install")," fails with ",(0,i.kt)("code",null,"code ENOENT")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," fails with the following error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm ERR! code ENOENT\nnpm ERR! syscall open\nnpm ERR! path [path]\\package.json\nnpm ERR! errno -4058\nnpm ERR! enoent ENOENT: no such file or directory, open '[path]\\package.json'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent\n")),(0,i.kt)("p",null,"Make sure that you're executing the command in the correct directory. When you\nfinish bootstrapping the project with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm init"),", it will display three\ncommands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd [path]\nnpm install\nnpm run serve\n")),(0,i.kt)("p",null,"Did you run the ",(0,i.kt)("inlineCode",{parentName:"p"},"cd")," command to switch to the directory containing your project?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"I moved the camera too far away and can't find the preview (The preview is is black)"),(0,i.kt)("p",null,"You can press ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to refocus the camera on the preview.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"File watching does not work on Windows Subsystem for Linux (WSL) 2"),(0,i.kt)("p",null,"When running Vite on WSL2, file system watching does not work if a file is\nedited by Windows applications."),(0,i.kt)("p",null,"To fix this, move the project folder into the WSL2 file system and use WSL2\napplications to edit files. Accessing the Windows file system from WSL2 is slow,\nso this will improve performance."),(0,i.kt)("p",null,"For more information view the\n",(0,i.kt)("a",{parentName:"p",href:"https://vitejs.dev/config/server-options.html#server-watch"},(0,i.kt)("strong",{parentName:"a"},"Vite Docs")),".")))}d.isMDXComponent=!0}}]);