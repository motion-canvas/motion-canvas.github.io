import{u as g,R as w,D as y,Q as v,Z as S,g as h,E,s as d,i as m,q as p}from"./makeScene2D-b66c2a7c.js";function x(n){if(!f()||n.startsWith("/cors-proxy/"))return n;const e=new URL(window.location.toString());try{const t=new URL(n,e);if(!t.protocol.startsWith("http")||e.host===t.host||!R(t.host))return n}catch{return n}return`/cors-proxy/${encodeURIComponent(n)}`}function R(n){const e=C();if(e.length===0)return!0;for(const t of e)if(t.toLowerCase().trim()===n)return!0;return!1}function f(){return!1}let c;function C(){return{}.VITEST!=="true"&&c?[...c]:(c=function(){if(!f()||!{VITE_MC_PROXY_ENABLED:"false",BASE_URL:"/examples/",MODE:"production",DEV:!1,PROD:!0,SSR:!1})return[];const e={}.VITE_MC_PROXY_ALLOW_LIST??"[]",t=JSON.parse(e);Array.isArray(t)||g().error("Parsed Allow List expected to be an Array, but is "+typeof t);const a=[];for(const s of t){if(typeof s!="string"){g().warn("Unexpected Value in Allow List: "+s+". Expected a String. Skipping.");continue}a.push(s)}return a}(),[...c])}var l=globalThis&&globalThis.__decorate||function(n,e,t,a){var s=arguments.length,i=s<3?e:a===null?a=Object.getOwnPropertyDescriptor(e,t):a,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(n,e,t,a);else for(var u=n.length-1;u>=0;u--)(o=n[u])&&(i=(s<3?o(i):s>3?o(e,t,i):o(e,t))||i);return s>3&&i&&Object.defineProperty(e,t,i),i};class r extends w{constructor(e){super(e),"src"in e||g().warn({message:"No source specified for the image",remarks:`<p>The image won&#39;t be visible unless you specify a source:</p>
<pre><code class="language-tsx"><span class="hljs-keyword">import</span> myImage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./example.png&#x27;</span>;
<span class="hljs-comment">// ...</span>
<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{myImage}</span> /&gt;</span></span>;
</code></pre>
<p>If you did this intentionally, and don&#39;t want to see this warning, set the <code>src</code>
property to <code>null</code>:</p>
<pre><code class="language-tsx">&lt;<span class="hljs-title class_">Img</span> src={<span class="hljs-literal">null</span>} /&gt;
</code></pre>
<p><a href='https://motioncanvas.io/docs/media#images' target='_blank'>Learn more</a> about working with
images.</p>
`,inspect:this.key})}desiredSize(){const e=super.desiredSize();if(e.x===null&&e.y===null){const t=this.image();return{x:t.naturalWidth,y:t.naturalHeight}}return e}image(){const e=this.src();let t="",a="";if(e){a=x(e);const i=new URL(a,window.location.origin);if(i.origin===window.location.origin){const o=this.view().assetHash();i.searchParams.set("asset-hash",o)}t=i.toString()}let s=r.pool[a];return s||(s=document.createElement("img"),s.crossOrigin="anonymous",s.src=t,r.pool[a]=s),s.complete||y.collectPromise(new Promise((i,o)=>{s.addEventListener("load",i),s.addEventListener("error",o)})),s}imageCanvas(){const e=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});if(!e)throw new Error("Could not create an image canvas");return e}filledImageCanvas(){const e=this.imageCanvas(),t=this.image();return e.canvas.width=t.naturalWidth,e.canvas.height=t.naturalHeight,e.imageSmoothingEnabled=this.smoothing(),e.drawImage(t,0,0),e}draw(e){this.drawShape(e);const t=this.alpha();if(t>0){const a=v.fromSizeCentered(this.computedSize());e.save(),e.clip(this.getPath()),t<1&&(e.globalAlpha*=t),e.imageSmoothingEnabled=this.smoothing(),S(e,this.image(),a),e.restore()}this.clip()&&e.clip(this.getPath()),this.drawChildren(e)}applyFlex(){super.applyFlex();const e=this.image();this.element.style.aspectRatio=(this.ratio()??e.naturalWidth/e.naturalHeight).toString()}getColorAtPoint(e){const t=this.computedSize(),a=this.naturalSize(),s=new h(e).add(this.computedSize().scale(.5)).mul(a.div(t).safe);return this.getPixelColor(s)}naturalSize(){const e=this.image();return new h(e.naturalWidth,e.naturalHeight)}getPixelColor(e){const t=this.filledImageCanvas(),a=new h(e),s=t.getImageData(a.x,a.y,1,1).data;return new E({r:s[0],g:s[1],b:s[2],a:s[3]/255})}collectAsyncResources(){super.collectAsyncResources(),this.image()}}r.pool={};l([d()],r.prototype,"src",void 0);l([m(1),d()],r.prototype,"alpha",void 0);l([m(!0),d()],r.prototype,"smoothing",void 0);l([p()],r.prototype,"image",null);l([p()],r.prototype,"imageCanvas",null);l([p()],r.prototype,"filledImageCanvas",null);l([p()],r.prototype,"naturalSize",null);export{r as I};
